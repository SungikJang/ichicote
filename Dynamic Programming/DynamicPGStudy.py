#Dynamic Programming
#큰 문제를 작게 나누고 같은 문제는 한번만 계산하여 효율성을 챙기는 기법
#탑다운 : 큰문제를 해결하기 위해 작은 문제를 호출
#보텀업 : 작은 문제부터 차근차근 답을 도출


#피보나치 함수 소스코드
def fibonacci(x):
    if x==1 or x==2:
        return 1
    return fibonacci(x-1)+fibonacci(x-2)
#위의 함수는 숫자 X가 커질수록 수행시간이 기하급수적으로 늘어나는 문제점이 있다. - 시간복잡도 θ(1.618.....N)
#동일한 함수가 이미 계산했지만 반복적으로 다시 호출된다. 숫자 X가 커질수록 븐복되는 횟수가 많아지는것

#Memoization기법
#한번 계산한 결과를 메모해두고 함수가 다시 호출되면 메모한 결과만 다시 가져오는 기법
